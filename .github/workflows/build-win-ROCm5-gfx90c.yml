name: CI

on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: "Create new release"
        required: true
        type: boolean
  push:
    branches:
      - master
      - ci
    paths:
      [
        ".github/workflows/**",
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
      ]
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      [
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
      ]

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  windows-latest-cmake:
    runs-on: windows-latest

    strategy:
      matrix:
        include:
          - build: "rocm5.5-gfx90c"
            defines: '-G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DSD_HIPBLAS=ON -DCMAKE_BUILD_TYPE=Release -DAMDGPU_TARGETS="gfx1100;gfx1101;gfx1102;gfx1030;gfx906;gfx90c" -DSD_BUILD_SHARED_LIBS=ON'

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cuda-toolkit
        id: cuda-toolkit
        if: ${{ matrix.build == 'cuda12' }}
        uses: Jimver/cuda-toolkit@v0.2.11
        with:
          cuda: "12.2.0"
          method: "network"
          sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'

      - name: Install rocm-toolkit
        id: rocm-toolkit
        if: ${{ matrix.build == 'rocm5.5-gfx90c' }}
        uses: Cyberhan123/rocm-toolkit@v0.1.0
        with:
          rocm: "5.5.0"

      - name: Install Ninja
        id: install-ninja
        if: ${{ matrix.build == 'rocm5.5-gfx90c' }}
        uses: urkle/action-get-ninja@v1
        with:
          version: 1.11.1

      - name: Test if clang and clang++ is available
        run: |
          clang --version
          clang++ --version

      - name: copy ROCmLibs
        if: ${{ matrix.build == 'rocm5.5-gfx90c' }}
        shell: powershell
        run: |
          ls $env:ROCM_PATH
          ls $env:ROCM_PATH\bin
          ls $env:ROCM_PATH\bin\rocblas\library
          Expand-Archive -Path 'ROCm\ROCmLibs-gfx90c.zip' -DestinationPath 'extracted'
          ls "extracted"
          robocopy "extracted" $env:ROCM_PATH\bin /s
          robocopy "extracted" $env:ROCM_PATH\bin rocblas.dll
          ls $env:ROCM_PATH
          ls $env:ROCM_PATH\bin
          ls $env:ROCM_PATH\bin\rocblas\library

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake .. ${{ matrix.defines }}
          cmake --build . --config Release

      - name: Get commit hash
        id: commit
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: pr-mpt/actions-commit-hash@v2

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          $filePath = ".\build\bin\Release\*"
          if (Test-Path $filePath) {
            echo "Exists at path $filePath"
            Copy-Item ggml/LICENSE .\build\bin\Release\ggml.txt
            Copy-Item LICENSE .\build\bin\Release\stable-diffusion.cpp.txt
            Copy-Item ROCm/generateSD-ROCm6.bat .\build\bin\Release\generateSD-ROCm6.bat
            Copy-Item ROCm/generateSDXL-ROCm6.bat .\build\bin\Release\generateSDXL-ROCm6.bat
            Copy-Item ROCm/generateSDXL-HIP_VISIBLE_DEVICES0-ROCm6.bat .\build\bin\Release\generateSDXL-HIP_VISIBLE_DEVICES0-ROCm6.bat
            Copy-Item ROCm/generateSDXL-HIP_VISIBLE_DEVICES1-ROCm6.bat .\build\bin\Release\generateSDXL-HIP_VISIBLE_DEVICES1-ROCm6.bat
            Copy-Item ROCm/generateFLUX-ROCm6.bat .\build\bin\Release\generateFLUX-ROCm6.bat
            Copy-Item ROCm/conveert2gguf-ROCm6.bat .\build\bin\Release\conveert2gguf-ROCm6.bat
            Copy-Item ROCm/startSDcppGUIwrapperSAMPLE-ROCm6.bat .\build\bin\Release\startSDcppGUIwrapperSAMPLE-ROCm6.bat
          } elseif (Test-Path ".\build\bin\stable-diffusion.dll") {
          $filePath = ".\build\bin\*"
            echo "Exists at path $filePath"
            Copy-Item ggml/LICENSE .\build\bin\ggml.txt
            Copy-Item LICENSE .\build\bin\stable-diffusion.cpp.txt
            Copy-Item ROCm/generateSD-ROCm6.bat .\build\bin\generateSD-ROCm6.bat
            Copy-Item ROCm/generateSDXL-ROCm6.bat .\build\bin\generateSDXL-ROCm6.bat
            Copy-Item ROCm/generateSDXL-HIP_VISIBLE_DEVICES0-ROCm6.bat .\build\bin\generateSDXL-HIP_VISIBLE_DEVICES0-ROCm6.bat
            Copy-Item ROCm/generateSDXL-HIP_VISIBLE_DEVICES1-ROCm6.bat .\build\bin\generateSDXL-HIP_VISIBLE_DEVICES1-ROCm6.bat
            Copy-Item ROCm/generateFLUX-ROCm6.bat .\build\bin\generateFLUX-ROCm6.bat
            Copy-Item ROCm/conveert2gguf-ROCm6.bat .\build\bin\conveert2gguf-ROCm6.bat
            Copy-Item ROCm/startSDcppGUIwrapperSAMPLE-ROCm6.bat .\build\bin\startSDcppGUIwrapperSAMPLE-ROCm6.bat
          } else {
            ls .\build\bin
            throw "Can't find stable-diffusion.dll"
          }
          7z a sd-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip $filePath

      - name: Copy and pack rocm5 runtime
        id: pack_rocm5
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.build == 'rocm5.5-gfx90c' ) || github.event.inputs.create_release == 'true' }}
        run: |
          echo "rocm5.5 location: $env:ROCM_PATH"
          $dst='.\build\bin\rocm5\'
          robocopy "$env:ROCM_PATH\bin" $dst rocblas.dll hipblas.dll libhipsparse.dll
          robocopy "$env:ROCM_PATH\bin\rocblas" $dst\rocblas /s /e
          7z a rocm5-sd-bin-win-rocm5-gfx90c-x64.zip $dst\*

      - name: Upload rocm5 runtime
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.build == 'rocm5.5-gfx90c' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sd-rocm5-sd-bin-win-rocm5-gfx90c-x64.zip
          path: |
            rocm5-sd-bin-win-rocm5-gfx90c-x64.zip

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sd-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip
          path: |
            sd-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip

  release:
    if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}

    runs-on: windows-latest

    needs:
      - windows-latest-cmake

    steps:
      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifact
          pattern: sd-*
          merge-multiple: true

      - name: Get commit hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-ROCm5-gfx90c

      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/${file}`)
                });
              }
            }
